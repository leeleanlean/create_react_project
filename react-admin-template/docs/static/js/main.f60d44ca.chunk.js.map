{"version":3,"sources":["serviceWorker.js","store/Common/index.js","store/index.js","router/router.js","views/Layout/components/SideBar/index.js","router/index.js","views/Layout/components/Main/index.js","views/Layout/index.js","index.js"],"names":["Boolean","window","location","hostname","match","configure","enforceActions","observable","name","age","action","userInfo","Common","Home","url","title","children","LayoutSideBar","state","active","height","innerHeight","this","resize","hashchange","setActive","addEventListener","HASH","hash","split","setState","routes","filter","item","toUpperCase","PARENT","CHILD","PARENT_ACTIVE","findIndex","CHILD_ACTIVE","onresize","className","style","length","map","index","key","to","React","Component","Loading","BasicExample","fallback","exact","path","render","component","lazy","LayoutMain","URL","ACTIVE","onClick","changeActive","Layout","ReactDOM","stores","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f60d44ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { observable, action, configure } from 'mobx'\n\nconfigure({ enforceActions: 'observed' })\n\nclass Common {\n  @observable userInfo = {\n    name: 'lean',\n    age: 10\n  }\n\n  @action changeName = name => {\n    this.userInfo.name = name\n  }\n}\n\nexport default new Common()\n","import Common from './Common'\nimport Home from './Home'\n\nexport default {\n  Common,\n  Home\n}\n","export default [\n  {\n    name: 'Home',\n    url: '/home',\n    title: '首页',\n    children: [\n      {\n        name: 'HomeIndex',\n        url: '/home/index',\n        title: '首页'\n      }\n    ]\n  },\n  {\n    name: 'About',\n    url: '/about',\n    title: '关于我们',\n    children: [\n      {\n        name: 'AboutIndex',\n        url: '/about/index',\n        title: '关于我们'\n      },\n      {\n        name: 'AboutCompony',\n        url: '/about/compony',\n        title: '关于公司'\n      }\n    ]\n  },\n  {\n    name: 'Contact',\n    url: '/contact',\n    title: '联系我们',\n    children: [\n      {\n        name: 'ContactIndex',\n        url: '/contact/index',\n        title: '联系我们'\n      },\n      {\n        name: 'ContactAddress',\n        url: '/contact/address',\n        title: '联系地址'\n      },\n      {\n        name: 'ContactPhone',\n        url: '/contact/phone',\n        title: '联系电话'\n      }\n    ]\n  }\n]\n","/* jshint esversion:6 */\nimport React from 'react'\nimport './index.scss'\nimport routes from '@/router/router'\n\nimport {\n  Link\n} from 'react-router-dom'\n\nexport default class LayoutSideBar extends React.Component {\n  state = {\n    active: 0,\n    children: [],\n    height: window.innerHeight\n  }\n\n  componentDidMount () {\n    this.resize()\n    this.hashchange()\n    this.setActive()\n  }\n\n  // 路由变化\n  hashchange () {\n    // 路由改变设置左侧菜单\n    window.addEventListener('hashchange', () => {\n      let HASH = '/' + window.location.hash.split('#/')[1].split('/')[0]\n      if (!HASH) HASH = '/'\n      this.setState({\n        children: routes.filter(item => {\n          return HASH.toUpperCase() === item.url.toUpperCase()\n        })[0].children\n      })\n      // 设置激活菜单\n      this.setActive()\n    })\n  }\n\n  // 设置激活菜单\n  setActive () {\n    let PARENT = '/' + window.location.hash.split('#/')[1].split('/')[0]\n    let CHILD = '/' + window.location.hash.split('#/')[1].split('/')[1]\n    if (PARENT === '/') { PARENT = '/home' }\n    if (CHILD === '/') { CHILD = '/index' }\n\n    // 获取父active\n    const PARENT_ACTIVE = routes.findIndex((item) => {\n      return PARENT.toUpperCase() === item.url.toUpperCase()\n    })\n\n    // 获取子active\n    const CHILD_ACTIVE = routes[PARENT_ACTIVE].children.findIndex(item => {\n      return (PARENT.toUpperCase() + CHILD.toUpperCase()) === item.url.toUpperCase()\n    })\n    this.setState({\n      active: CHILD_ACTIVE,\n      children: routes[PARENT_ACTIVE].children\n    })\n  }\n\n  // 窗口大小改变，重设左侧高度\n  resize () {\n    window.onresize = () => {\n      this.setState({\n        height: window.innerHeight\n      })\n    }\n  }\n\n  render () {\n    return (\n      <section\n        className='left'\n        style={{ height: this.state.height }}>\n        <header>React后台管理系统</header>\n        <aside>\n          <ul>\n            {\n              this.state.children.length ? this.state.children.map((item, index) => {\n                return <li key={index}>\n                  <Link\n                    className={this.state.active === index ? 'active' : ''}\n                    to={item.url}>\n                    {item.title}\n                  </Link>\n                </li>\n              }) : <div>暂无菜单</div>\n            }\n          </ul>\n        </aside>\n      </section>\n    )\n  }\n}\n","import React, { lazy, Suspense } from 'react'\nimport {\n  HashRouter,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom'\n\nimport routes from './router'\n\n// Loading\nconst Loading = <div>Loading...</div>\n\nconst BasicExample = () => (\n  <HashRouter>\n    <Suspense fallback={ Loading }>\n      <Switch>\n        {/* root */}\n        <Route exact path='/' render={() => <Redirect to='/home/index' />} />\n\n        {/* 一级路由 */}\n        {\n          routes && routes.map((item, index) => {\n            return <Route key={index} exact path={item.url} render={() => <Redirect to={item.children[0].url} />} />\n          })\n        }\n\n        {/* 二级菜单 */}\n        {/* home */}\n        <Route exact path='/home/index' component={ lazy(() => import('@/views/Home/Index/index')) } />\n\n        {/* about */}\n        <Route exact path='/about/index' component={ lazy(() => import('@/views/About/Index/index')) } />\n        <Route exact path='/about/compony' component={ lazy(() => import('@/views/About/Compony')) } />\n\n        {/* contact */}\n        <Route exact path='/contact/index' component={ lazy(() => import('@/views/Contact/Index/index')) } />\n        <Route exact path='/contact/address' component={ lazy(() => import('@/views/Contact/Address')) } />\n        <Route exact path='/contact/phone' component={ lazy(() => import('@/views/Contact/Phone')) } />\n\n        {/* NotFound */}\n        <Route component={ lazy(() => import('@/views/NotFound')) } />\n      </Switch>\n    </Suspense>\n  </HashRouter>\n)\nexport default BasicExample\n","import React from 'react'\nimport Router from '@/router/index'\nimport routes from '@/router/router'\nimport { Link } from 'react-router-dom'\n\nimport './index.scss'\n\nexport default class LayoutMain extends React.Component {\n  state = {\n    active: 0\n  }\n\n  componentDidMount () {\n    this.setActive()\n  }\n\n  // 刷新后设置默认菜单\n  setActive () {\n    const URL = '/' + window.location.hash.split('#/')[1].split('/')[0]\n    if (window.location.hash === '#/home/index') {\n      this.setState({\n        active: 0\n      })\n    } else {\n      const ACTIVE = routes.findIndex((item) => {\n        return URL.toUpperCase() === item.url.toUpperCase()\n      })\n      this.setState({\n        active: ACTIVE\n      })\n    }\n  }\n\n  // 切换顶级菜单\n  changeActive (index) {\n    this.setState({\n      active: index\n    })\n  }\n\n  render () {\n    return (\n      <section className='right'>\n        <header>\n          <div className=\"menu\">M</div>\n          <ul>\n            {\n              routes ? routes.map((item, index) => {\n                return <li key={index}>\n                  <Link\n                    className={this.state.active === index ? 'active' : ''}\n                    to={item.url + '/index'}\n                    onClick={() => this.changeActive(index)}>\n                    {item.title}\n                  </Link>\n                </li>\n              }) : <div></div>\n            }\n          </ul>\n          <div className=\"user\">User</div>\n        </header>\n        <section className='container'>\n          <Router />\n        </section>\n      </section>\n    )\n  }\n}\n","import React from 'react'\nimport './index.scss'\n\nimport SideBar from './components/SideBar'\nimport Main from './components/Main'\n\nexport default class Layout extends React.Component {\n  render () {\n    return (\n      <section className='app'>\n        <SideBar />\n        <Main />\n      </section>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\n\n// react-router-dom\nimport { HashRouter } from 'react-router-dom'\n\n// store\nimport { Provider } from 'mobx-react'\nimport stores from './store'\n\n// Layout\nimport Layout from './views/Layout'\n\n// 全局样式\nimport './assets/styles/index.scss'\n\nReactDOM.render((\n  <HashRouter>\n    <Provider {...stores}>\n      <Layout />\n    </Provider>\n  </HashRouter>\n), document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}